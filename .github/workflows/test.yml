name: Test

on:
  push:
    branches: [main]
  pull_request:
    branches: [main]

jobs:
  test:
    runs-on: ubuntu-latest
    permissions:
      contents: read
      checks: write
      pull-requests: write

    strategy:
      matrix:
        node-version: [20.11.0]

    steps:
      - uses: actions/checkout@v3

      - name: Use Node.js ${{ matrix.node-version }}
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}

      - name: Detect package manager
        id: detect-pm
        run: |
          if [ -f "yarn.lock" ]; then
            echo "manager=yarn" >> $GITHUB_OUTPUT
            echo "command=yarn install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=yarn" >> $GITHUB_OUTPUT
          elif [ -f "pnpm-lock.yaml" ]; then
            echo "manager=pnpm" >> $GITHUB_OUTPUT
            echo "command=pnpm install --frozen-lockfile" >> $GITHUB_OUTPUT
            echo "runner=pnpm" >> $GITHUB_OUTPUT
          elif [ -f "package-lock.json" ]; then
            echo "manager=npm" >> $GITHUB_OUTPUT
            echo "command=npm install" >> $GITHUB_OUTPUT
            echo "runner=npm run" >> $GITHUB_OUTPUT
          else
            echo "‚ùå No lock file found!"
            echo "Please commit a lock file to ensure reproducible builds:"
            echo "  - For npm: commit package-lock.json (run 'npm install')"
            echo "  - For yarn: commit yarn.lock (run 'yarn install')"
            echo "  - For pnpm: commit pnpm-lock.yaml (run 'pnpm install')"
            echo ""
            echo "This ensures all developers and CI use the same dependency versions."
            exit 1
          fi

      - name: Setup package manager cache
        uses: actions/setup-node@v3
        with:
          node-version: ${{ matrix.node-version }}
          cache: ${{ steps.detect-pm.outputs.manager }}

      - name: Install dependencies
        run: ${{ steps.detect-pm.outputs.command }}

      - name: Run tests with coverage
        run: ${{ steps.detect-pm.outputs.runner }} test:coverage

      - name: Verify coverage directory
        run: |
          echo "Coverage directory contents:"
          ls -la coverage/
          echo "Verifying lcov.info:"
          test -f coverage/lcov.info || (echo "lcov.info not found" && exit 1)

      - name: Upload coverage report
        uses: codecov/codecov-action@v5
        with:
          token: ${{ secrets.CODECOV_TOKEN }}
          files: ./coverage/lcov.info
          slug: zestic/react-native-expo-component-template
          fail_ci_if_error: true
